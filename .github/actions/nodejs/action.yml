name: Taiga-UI action for Node.js
description: Node.js setup cache

inputs:
  node-version:
    description: Node.js version
    required: false
    default: 18.x

outputs:
  root-package-version:
    description: Full version of root package.json (x.y.z)
    value: ${{ steps.output.outputs.root-package-version }}
  root-package-major-version:
    description: Only major version of root package.json (x)
    value: ${{ steps.output.outputs.root-package-major-version }}
  is-release-candidate:
    description: root package.json includes -rc
    value: ${{ steps.output.outputs.is-release-candidate }}

runs:
  using: composite
  steps:
    - name: Use Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v3.6.0
      with:
        node-version: ${{ inputs.node-version }}
        registry-url: 'https://registry.npmjs.org'

    - name: Restore node_modules from cache
      id: cache-node-modules
      uses: actions/cache@v3.3.1
      with:
        path: |
          **/node_modules/
          !**/node_modules/.cache
        key: modules-cache__nodejs-${{ inputs.node-version }}__${{ hashFiles('**/package-lock.json') }}

    - name: Restore from global NPM cache
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      uses: actions/cache@v3.3.1
      with:
        path: ~/.npm
        key: npm-cache__nodejs-${{ inputs.node-version }}__${{ hashFiles('**/package-lock.json') }}
        restore-keys: npm-cache-hash__

    - shell: bash
      run: echo "CYPRESS_CACHE_FOLDER=./node_modules/cache-cypress" >> $GITHUB_ENV

    - shell: bash
      run: |
        echo "Show environment Node.js, npm ..."
        node -v
        npm -v

    - name: Clean install dependencies
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      run: npm ci
      shell: bash

    - name: Verify that Cypress is installed correctly and is executable.
      if: github.ref != 'refs/heads/main'
      shell: bash
      run: |
        npx cypress cache path
        npx cypress cache list
        npx cypress verify

    - id: output
      shell: bash
      run: |
        echo "root-package-version=v$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        echo "root-package-major-version=$(node -p "parseInt(require('./package.json').version)")" >> $GITHUB_OUTPUT
        echo "is-release-candidate=$(node -p "require('./package.json').version.includes('rc')")" >> $GITHUB_OUTPUT
